// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MothAphotheaShopAPI;

#nullable disable

namespace MothAphotheaShopAPI.Migrations
{
    [DbContext(typeof(Db))]
    [Migration("20250613232933_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AromaIngredient", b =>
                {
                    b.Property<int>("AromasId")
                        .HasColumnType("int");

                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.HasKey("AromasId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("AromaIngredient");
                });

            modelBuilder.Entity("AromaProduct", b =>
                {
                    b.Property<int>("AromasId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("AromasId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("AromaProduct");
                });

            modelBuilder.Entity("ContraindicationIngredient", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<int>("WarningsId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "WarningsId");

                    b.HasIndex("WarningsId");

                    b.ToTable("ContraindicationIngredient");
                });

            modelBuilder.Entity("ContraindicationProduct", b =>
                {
                    b.Property<int>("ContraindicationsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("ContraindicationsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("ContraindicationProduct");
                });

            modelBuilder.Entity("EffectIngredient", b =>
                {
                    b.Property<int>("EffectsId")
                        .HasColumnType("int");

                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.HasKey("EffectsId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("EffectIngredient");
                });

            modelBuilder.Entity("EffectProduct", b =>
                {
                    b.Property<int>("EffectsId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("EffectsId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("EffectProduct");
                });

            modelBuilder.Entity("FlavorNoteIngredient", b =>
                {
                    b.Property<int>("FlavorProfileId")
                        .HasColumnType("int");

                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.HasKey("FlavorProfileId", "IngredientsId");

                    b.HasIndex("IngredientsId");

                    b.ToTable("FlavorNoteIngredient");
                });

            modelBuilder.Entity("FlavorNoteProduct", b =>
                {
                    b.Property<int>("FlavorNotesId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.HasKey("FlavorNotesId", "ProductsId");

                    b.HasIndex("ProductsId");

                    b.ToTable("FlavorNoteProduct");
                });

            modelBuilder.Entity("IngredientTexture", b =>
                {
                    b.Property<Guid>("IngredientsId")
                        .HasColumnType("char(36)");

                    b.Property<int>("TexturesId")
                        .HasColumnType("int");

                    b.HasKey("IngredientsId", "TexturesId");

                    b.HasIndex("TexturesId");

                    b.ToTable("IngredientTexture");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.ActiveCompound", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ChemicalFormula")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("EffectId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EffectId");

                    b.ToTable("ActiveCompounds");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Aroma", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Aromas");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Contraindication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Contraindications");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Effect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.FlavorNote", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("FlavorNotes");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Ingredient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<int?>("ActiveCompoundId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("ScientificName")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "scientific_name");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCompoundId");

                    b.HasIndex("ProductId");

                    b.HasIndex("TypeId");

                    b.ToTable("Ingredients");

                    b.HasAnnotation("Relational:JsonPropertyName", "ingredient_list");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.IngredientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("IngredientTypes");

                    b.HasAnnotation("Relational:JsonPropertyName", "type");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ActiveCompoundId")
                        .HasColumnType("int");

                    b.Property<int>("CaffeineLevel")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "caffeine_level");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "origin");

                    b.Property<string>("Preparation")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("Relational:JsonPropertyName", "preparation_instructions");

                    b.Property<double>("Price")
                        .HasColumnType("double")
                        .HasAnnotation("Relational:JsonPropertyName", "price");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCompoundId");

                    b.HasIndex("TypeId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.ProductType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("productTypes");

                    b.HasAnnotation("Relational:JsonPropertyName", "type");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Texture", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Textures");
                });

            modelBuilder.Entity("ProductTexture", b =>
                {
                    b.Property<int>("ProductsId")
                        .HasColumnType("int");

                    b.Property<int>("TexturesId")
                        .HasColumnType("int");

                    b.HasKey("ProductsId", "TexturesId");

                    b.HasIndex("TexturesId");

                    b.ToTable("ProductTexture");
                });

            modelBuilder.Entity("AromaIngredient", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Aroma", null)
                        .WithMany()
                        .HasForeignKey("AromasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AromaProduct", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Aroma", null)
                        .WithMany()
                        .HasForeignKey("AromasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContraindicationIngredient", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Contraindication", null)
                        .WithMany()
                        .HasForeignKey("WarningsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContraindicationProduct", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Contraindication", null)
                        .WithMany()
                        .HasForeignKey("ContraindicationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EffectIngredient", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Effect", null)
                        .WithMany()
                        .HasForeignKey("EffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EffectProduct", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Effect", null)
                        .WithMany()
                        .HasForeignKey("EffectsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlavorNoteIngredient", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.FlavorNote", null)
                        .WithMany()
                        .HasForeignKey("FlavorProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlavorNoteProduct", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.FlavorNote", null)
                        .WithMany()
                        .HasForeignKey("FlavorNotesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("IngredientTexture", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Ingredient", null)
                        .WithMany()
                        .HasForeignKey("IngredientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Texture", null)
                        .WithMany()
                        .HasForeignKey("TexturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MothAphotheaShopAPI.ActiveCompound", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Effect", null)
                        .WithMany("ActiveCompounds")
                        .HasForeignKey("EffectId");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Ingredient", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.ActiveCompound", null)
                        .WithMany("Ingredients")
                        .HasForeignKey("ActiveCompoundId");

                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany("IngredientList")
                        .HasForeignKey("ProductId");

                    b.HasOne("MothAphotheaShopAPI.IngredientType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Product", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.ActiveCompound", null)
                        .WithMany("Products")
                        .HasForeignKey("ActiveCompoundId");

                    b.HasOne("MothAphotheaShopAPI.ProductType", "Type")
                        .WithMany("Products")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProductTexture", b =>
                {
                    b.HasOne("MothAphotheaShopAPI.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MothAphotheaShopAPI.Texture", null)
                        .WithMany()
                        .HasForeignKey("TexturesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MothAphotheaShopAPI.ActiveCompound", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Effect", b =>
                {
                    b.Navigation("ActiveCompounds");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.Product", b =>
                {
                    b.Navigation("IngredientList");
                });

            modelBuilder.Entity("MothAphotheaShopAPI.ProductType", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
